<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Jayinnn's Blog</title><link>https://blog.jayinnn.dev/tags/python/</link><description>Recent content in Python on Jayinnn's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Jayinnn © CC BY-NC-SA 4.0</copyright><lastBuildDate>Thu, 22 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jayinnn.dev/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>第一個Telegram Bot:@BikeAnywhereBot</title><link>https://blog.jayinnn.dev/posts/ubikeanywherebot/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.jayinnn.dev/posts/ubikeanywherebot/</guid><description>Github Repo: https://github.com/jayin92/UBikeAnywhereBot
動機 我自己有時候到外縣市遊玩或參加各種活動的時候，常常會使用Ubike當作交通工具，但因為不熟當地的地形和Ubike站點的位置，常常會需要用手機在瀏覽器和地圖之間瘋狂切換才能找到正確的站點及正確的路線，讓我十分困擾。而且在騎乘自行車時做出上述的動作更是十分危險。所以當時在SITCON夏令營時，就覺得這個需求其實蠻迫切的，所以就決定我們黑客松的主題。
介紹 這個Telegram Bot是我在SITCON夏令營做的一個Ubike站點路徑規劃機器人，這個機器人主要可以幫你找到離出發地和目的地最近且可用的兩個Ubike站點，並且回傳導航路線給用戶，也同時會傳送給用戶那兩個站點目前的車輛數和空位數。
Telegram ? Telegram是一個跨平台的即時通訊軟體，它的用戶端是自由及開放原始碼軟體，但是它的伺服器是專有軟體。使用者可以相互交換加密與自毀訊息，傳送相片、影片等所有類型檔案。官方提供手機版（Android、iOS、Windows Phone）、電腦版（Windows、macOS、Linux）和網頁版等多種平台用戶端；同時官方開放應用程式介面，因此擁有許多第三方的用戶端可供選擇，其中多款內建中文。 From Wikipedia
Telegram 就是一個通訊軟體，但功能十分強大，不管是高達1.5GB的最大檔案上傳大小、優秀的群組管理功能、端對端的加密、所有聊天資料雲端備份（就不會出現某通訊軟體，換手機聊天紀錄全部消失的問題）、多設備同時登入等等…
而且更重要的是，我們可以利用官方所提供的API來建立我們自己的機器人，更棒的是，網路上已經有可以直接使用的Python Library：https://github.com/python-telegram-bot/python-telegram-bot，這讓開發的過程更加容易。
使用 安裝Telegram後，可以利用以下網址使用我們的機器人 https://t.me/bikeanywherebot
Bot 首先會詢問使用者的出發地及目的地（支援模糊搜尋），並利用政府所提供的PTX API取的全台Ubike站點名稱、經緯度、已停車輛、空位，再利用經緯度及已停車輛或空位算出與出發地和目的地可用且最近的Ubike站點，在將這四個位置輸入Google Maps的導航，就完成了一次操作。
更詳細的說明也可以參考我們的簡報：https://docs.google.com/presentation/d/1lNG2SYwuUna-86FPnBUql_JN1xgufkv2j6Hai_BKe2E/edit
Library 我們在這個專案主要用了下面幾個library:
telegram (就是python-telegram-bot) requests 抓api的資料 json 將json檔變成Python原生的字典 configparser 讀取config.ini API 我們在這個project主要用到了兩個API，一個是Google的Firebase，用來生成Dynamic Link。還有一個是政府的PTX(Public Transport Data eXchange)平台，用來查詢Ubike的站點位置，即時的車輛數等等…
我們一開始並沒有找到PTX這個整合性的平台，而是先找到了各縣市的Ubike開放資料，而且並不是每個縣市的資料開放平台都有Ubike的資料。這讓我們很困擾，因為我們要花很多時間處理各個縣市不統一的資料形式，而且還要申請不同縣市資料平台的API Key。但幸好後來有一位小隊員找到政府的PTX平台，上面有所有擁有公共自行車站點的縣市的資料，而且只需要一個API Key，這讓資料的取得相當的方便。
我們的導航網址是利用網址分析的方式產出的，格式大概長這樣： https://www.google.com/maps/dir/?api=1&amp;amp;origin=海洋大學&amp;amp;destination=臺灣大學&amp;amp;waypoints=臺北動物園|臺北101&amp;amp;travelmode=driving
origin: 起點 (可以是座標、地點名稱、Google的placeID) destination: 終點 (可以是座標、地點名稱、Google的placeID) waypoints: 中途點 (格式與上面相同，中途點間用|分隔) travelmode: 導航模式 (driving, walking, motorcycling, etc&amp;hellip;) 所以上面那段網址點進去後，會出現Google Maps的導航畫面，路線是 海洋大學 → 臺北動物園 → 臺北101 → 臺灣大學 而導航模式是開車。 可以發現，這串網址如果直接發給用戶會相當的難看，而且並不會直接導向到Google Maps的APP，當我試著用各家的縮網址服務時，隊友找到了一個叫Dynamic Link的東西。Dynamic Link是一個由Google Firebase提供的服務，它不僅可以縮網址，而且網址的域名還是自訂的(https://bikeanywhere.</description></item><item><title>有關謝爾賓斯基三角形 aka Sierpinski triangle</title><link>https://blog.jayinnn.dev/posts/sierpinski-triangle/</link><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid>https://blog.jayinnn.dev/posts/sierpinski-triangle/</guid><description>介紹 在上一篇文章中，我們知道Barnsley Fern與這次介紹的謝爾賓斯基三角形都是碎形。
照慣例(XD)我們再次引用Wikipedia的內容
謝爾賓斯基三角形（英語：Sierpinski triangle）是一種碎形，由波蘭數學家謝爾賓斯基在1915年提出。它是自相似集的例子。From Wikipedia
我們這次所介紹的繪圖方法，維基百科把它稱作Chaos Game。也就是隨機的方法。
主要的方法如下:
隨便畫個三角形(原始的謝爾賓斯基三角形為正三角形) 在三角形內部隨便找一個點P 從三角形三個頂點隨機找一個頂點 點出點P跟選定的頂點的中點 把那個中點當作新的點P 重複3. 以下是執行的結果
可以很清楚的看到這個圖形是用點點出來的
程式碼介紹 這次的程式簡單到可以直接全部貼上來
# import package import turtle import random import math random.seed() # 定義三角形三頂點 pointa = (0,400) pointb = (-650,-300) pointc = (650,-300) point = [pointa, pointb, pointc] # 定義第一個點(若這個點為隨機產出一樣對產出三角形完全沒有影響) firstpoint = (-200,250) # 定義繪點函數(傳入tuple) def drawdot(point, color=&amp;#39;black&amp;#39;): turtle.penup() turtle.goto(point[0],point[1]) turtle.pendown() turtle.dot(2, color) # 傳入兩個點(tuple)回傳兩點中點座標(tuple) def gohalf(point1,point2): point = ((point1[0] + point2[0]) / 2, ((point1[1] + point2[1]) / 2)) return point # turtle package init turtle.</description></item><item><title>有關 Barnsley Fern</title><link>https://blog.jayinnn.dev/posts/barnsley-fern/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://blog.jayinnn.dev/posts/barnsley-fern/</guid><description>前言 Barnsley Fern 引用英文版Wikipedia對Barnsley Fern的介紹:
The Barnsley fern is a fractal named after the British mathematician Michael Barnsley who first described it in his book Fractals Everywhere. From Wikipedia
翻譯成中文大概就是: &amp;ldquo;Barnsley Fern 是一個由一位英國數學家 Michael Barnsley 在他所寫的書 Fractals Everywhere 中所描述的一種碎形&amp;rdquo;
那甚麼是碎形呢? 我們再次引用Wikipedia，不過這次是中文版(我懶得翻譯阿)
碎形（英語：Fractal），又稱分形、殘形，通常被定義為「一個粗糙或零碎的幾何形狀，可以分成數個部分，且每一部分都（至少近似地）是整體縮小後的形狀」，即具有自相似的性質。From Wikipedia
有名的碎形有科赫雪花與謝爾賓斯基三角形，有關謝爾賓斯基三角形可以參考部落格的另外一篇文章 https://jayin92.github.io/posts/sierpinski-triangle/
科赫雪花 謝爾賓斯基三角形 我們可以很容易的看到說不管你把一個碎形放大多少倍，它所呈現的圖形會跟原本一模一樣，這就是碎形自相似的性質。
不過我們今天不會太深入去講碎形，因為其實我也不太會😭
Barnsley Fern 介紹 其實Barnsley Fern的描繪過程可以由下面方程組 (Transmotions functions &amp;ldquo;變換函數?&amp;rdquo;) 決定:
其中$P()$代表此方程式在此方程組的發生機率
而$f_1$主要生成Barnsley Fern中的梗的部分
$f_2$為小的散葉
$f_3$為左邊的葉子
$f_4$為右邊的葉子
利用Python內建的Turtle庫畫出Barnsley Fern 不過在電腦科學裡，我們可以利用迭代(遞迴)的方式來繪出Barnsley Fern
所以我們可以利用python寫出上面四個方程式 (函數傳入值及回傳值皆為tuple)</description></item></channel></rss>