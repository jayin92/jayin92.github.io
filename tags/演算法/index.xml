<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>演算法 on Jayinnn's Blog</title><link>https://blog.jayinnn.dev/tags/%E6%BC%94%E7%AE%97%E6%B3%95/</link><description>Recent content in 演算法 on Jayinnn's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Jayinnn © CC BY-NC-SA 4.0</copyright><lastBuildDate>Tue, 20 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jayinnn.dev/tags/%E6%BC%94%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>P vs NP</title><link>https://blog.jayinnn.dev/posts/p-vs-np/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.jayinnn.dev/posts/p-vs-np/</guid><description>前言 這篇其實是為了資訊讀書會打的，打完之後發現可以充文章數，所以就把它打進來了。
這篇主要介紹P, NP, NP Complete 和 NP Hard。還有一些已經被證明是NP Complete 的問題。
時間複雜度 就是一個函數，描述一個演算法的執行時間。
簡單來說，假設有一個演算法，你給這個演算法一個大小為n的輸入，它最多要 $6n^3+5n^2+2n+1$ 的時間才能執行完畢，我們就說這個演算法的時間複雜度是$O(n^3)$，這個$O()$我們稱作大O符號 (Big O notation)，又叫做漸進符號，它是用另一個（通常更簡單的）函式來描述一個函式數量級的漸近上界。
還有一個東西叫做最壞時間複雜度(Worst-case complexity)記作 $T(n)$
排序演算法的其中一種：插入排序(insertion sort)的時間複雜度是$O(n^2)$，下面是插入排序的Python 程式，為什麼這個演算法的是$O(n^2)$嗎？
def insertionSort(arr): # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0...i-1], while j &amp;gt;= 0 and key &amp;lt; arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key 我們今天不會提到太多的排序演算法，因為我們的主題是P vs NP。
P P 代表的是 Polynomial (多項式)，若有一個問題可以在多項式時間(polynomial time)複雜度 ($O(1), O(\log n), O(n^2), O(n \log n), O(n^3), O(n^4)$&amp;hellip;皆為多項式時間複雜度)解決，則我們說此問題為P類問題。</description></item></channel></rss>