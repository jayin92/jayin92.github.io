<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SITCON on Jayinnn's Blog</title><link>https://blog.jayinnn.dev/tags/sitcon/</link><description>Recent content in SITCON on Jayinnn's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Jayinnn © CC BY-NC-SA 4.0</copyright><lastBuildDate>Sun, 25 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jayinnn.dev/tags/sitcon/index.xml" rel="self" type="application/rss+xml"/><item><title>2019 SITCON Camp 回顧</title><link>https://blog.jayinnn.dev/posts/2019-sitcon-camp/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.jayinnn.dev/posts/2019-sitcon-camp/</guid><description>前言 一開始不知道有SITCON 夏令營這個活動，是同學拉我去的（因為團報有優惠www），而且這個營隊沒有衝到我去美國的時間，所以就腦衝一波了。
其實很早之前就知道SITCON這個年會，原本今年也要去參加的，但因為沒有注意報名的時間所以就錯過了QQ。
報名的時候就把以前做過的專案打上去，再說說自己想要透過這次的機會更好的了解資訊圈，結果就很幸運的上了www。
Day 0 因為不想Day 1早起趕去桃園火車站坐火車，所以Day 0就跟同學先過去海大了。
因為報到時間最晚到9點，所以我就提議去逛個基隆廟口夜市，順便吃個晚餐。因為不知道火車站可以寄放行李，所以我跟同學就拖著行李逛了一個半小時的廟口夜市，吃了天婦羅、蚵仔煎、三鮮羹還有三兄弟豆花（這個吃最飽www）。
搭公車去海大的時候，直接被站牌戳一波，同一個站竟然有兩個站牌???，直接看著兩班車開過去QQ。
大概晚上八點到達海大，房間已經有兩個室友了，因為跟他們超級不熟，所以Day 0在房間都沒有在講話，有夠尷尬的QQ。
不得不說海大宿舍的衛浴真的超級新，跟房間差有夠多，合理推測應該是有整修過。
Day 1 Day 1早上就是報到和破冰，還有各種處罰QQ，我和另一個隊員因為打輸德國蟑螂，所以被處罰在全部人面前跟他互喊「喔，我的羅密歐」、「喔，我的茱麗葉」，有夠羞恥的，第一次參加營隊第一天就那麼刺激的。
下午就是基礎的Python語法，之前因為已經有接觸過Python了，所以課程還蠻間單的。因為不想上課太無聊，所以就打打共筆，順便複習語法。不得不說這上課的速度真的有點嚇到我，要不是有點基礎，我大概會直接躺在地上陣亡ㄅ。
晚上繼續上Python，速度還是一樣恐怖，怕爆。
Day 2 早上吃完早餐後，直接讓我們比賽telegram上的遊戲，一開始以為會前三，結果最後直接被虐爆，最後好像才第六名吧QQ。
遊戲玩完後，上的是網路、HTTP、RESTful 的基礎觀念，之前有看過有關網路的維基百科條目，但沒有系統性的了解過。這堂課用ncat跟Wireshark讓我們了解網路的運作原理，我覺得超棒！！！
午餐吃完後，是splitline大大的課，大大講解了一些資訊安全的基本觀念，讓我這個對資安一點概念的人有了一些基本的觀念。
接著繼續上Python的語法，好像是上函數，反正上的一樣還是很快。晚上原本是神秘活動的，但因為Day 3放颱風假，沒辦法到電腦教室上課，所以就把Day 3早上的package management、pip &amp;amp; requests、handle json data跟神秘活動互調，變得下午和整個晚上都在上Python，大家都快累死了QQ。
至於黑客松的主題也在Day 2討論出來了，反正就是一個Ubike路徑規劃機器人，我自己覺得蠻實用的。
Day 3 因為Day 3放颱風假，所以Day 3十點起來就好，這真的超爽，因為前幾天都要7點起來。多睡三個小時真的差很多，早上起來精神超好的。
Day 3早上的神秘活動是把全部人關在小房間裡，然後解謎，解完四個謎題就可以玩類似知識王的小遊戲，不過裡面都是資訊題拉，但bug有點小多，甚至有一題有兩個選項是一模一樣的，但只有一個選項是對的，可悲的是我們每次都選錯 = =
接著又被關在另外一個小房間吃午餐＋討論黑客松，討論的時間其實好像都在裝oh my zsh和稍微教一下Github要怎麼用（？）
下午也是神秘活動，其實就是RPG拉，裡面有些關還蠻有趣的，特別是git的那個。我要來抱怨拼QR Code的那關，那個剪的也太碎，而且為什麼我們這小有3塊拉 = =
晚上因為風雨其實蠻小的，所以就跑回電腦教室上telegram bot的課程了，我們這次是使用python-telegram-bot這個Python Library。課程就介紹一下python-telegram-bot的語法，跟怎麼跟BotFather申請機器人。因為發覺我們機器人要做出來好像會有點小趕，所以我大概花了一個小時就把後面的投影片看了一下，把講師的練習做一做，就直接開始試做了。但因為那時候連後端都還沒開始寫，所以只是先熟悉一下library的語法和研究一下webhook(到最後還是沒用)。
Day 4 早上是社群闖關，我去PyCon的攤位靠回答一題水題（？）拿了一件PyCOn 2017的衣服（那件衣服真的好看），又去GDP的攤位靠Kahoot又拿了一件TensorFlow的衣服，可是那件是XL的，有點太大了QQ。
裡面也有很多很有趣的社群，像Mozilla是推廣一個叫Common Voice的計劃，就是收集志願者的聲音，讓機器可以學會真人說話的專案，讓你可以很方便的就對社會做出貢獻（？），我自己是覺得還蠻有意義的。
下午是資訊大神的見面會，我選擇了PCMan和Birdman（其實是因為聽過PCMan，而且覺得他很神奇才選這場的）。
PCMan以前是榮總的風濕免疫科的主治醫生，因為聯考前發現自己對資訊有興趣，但因為覺得可以先走醫學看看，所以就跑去陽明醫了，後來就一直在醫學界了。後來當了主治醫生好幾年後，發現自己還是沒有對醫學那麼的感興趣，所以就跑去台大念資工研究所了，現在在Appier任職資深工程師。
Birdman則是一位已經創立三家公司的創業家，前兩家的公司都被外商公司收購了，現在第三家公司：奧義智慧，則專注在資安方面。他主要分享一些他作為老闆的一些看法及想法。
晚上就是黑客松時間 aka 瘋狂寫code時間，我和另外一位同學負責後端，我做PTX的部份，他做Google Maps，我的工作就是將Ubike站點的資料包裝成一個容易使用的函數，和把整個後端整合起來。這邊可以提一下，我們機器人有一個部份是搜尋最近的站點ㄇ，那個部份我是用爆搜的，因為分析了一下全台站點數並沒有很多(1747)，用經緯度算距離也不是一件很難的事情。最後證明我是對的，整個爆搜的時間小到可以忽略。後端整個做完大概花了我和另一個隊員一個半小時ㄅ，正當我們以為今天晚上不用熬夜的時候，我們發現前端的分工似乎有點問題，進度有點緩慢，所以我就莫名其妙跳到前端了，後來直接熬夜把整個程式在8個小時硬幹出來(python-telegram-bot那個Handler真的很煩，沒把它remove掉竟然會衝突= =)</description></item><item><title>第一個Telegram Bot:@BikeAnywhereBot</title><link>https://blog.jayinnn.dev/posts/ubikeanywherebot/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.jayinnn.dev/posts/ubikeanywherebot/</guid><description>Github Repo: https://github.com/jayin92/UBikeAnywhereBot
動機 我自己有時候到外縣市遊玩或參加各種活動的時候，常常會使用Ubike當作交通工具，但因為不熟當地的地形和Ubike站點的位置，常常會需要用手機在瀏覽器和地圖之間瘋狂切換才能找到正確的站點及正確的路線，讓我十分困擾。而且在騎乘自行車時做出上述的動作更是十分危險。所以當時在SITCON夏令營時，就覺得這個需求其實蠻迫切的，所以就決定我們黑客松的主題。
介紹 這個Telegram Bot是我在SITCON夏令營做的一個Ubike站點路徑規劃機器人，這個機器人主要可以幫你找到離出發地和目的地最近且可用的兩個Ubike站點，並且回傳導航路線給用戶，也同時會傳送給用戶那兩個站點目前的車輛數和空位數。
Telegram ? Telegram是一個跨平台的即時通訊軟體，它的用戶端是自由及開放原始碼軟體，但是它的伺服器是專有軟體。使用者可以相互交換加密與自毀訊息，傳送相片、影片等所有類型檔案。官方提供手機版（Android、iOS、Windows Phone）、電腦版（Windows、macOS、Linux）和網頁版等多種平台用戶端；同時官方開放應用程式介面，因此擁有許多第三方的用戶端可供選擇，其中多款內建中文。 From Wikipedia
Telegram 就是一個通訊軟體，但功能十分強大，不管是高達1.5GB的最大檔案上傳大小、優秀的群組管理功能、端對端的加密、所有聊天資料雲端備份（就不會出現某通訊軟體，換手機聊天紀錄全部消失的問題）、多設備同時登入等等…
而且更重要的是，我們可以利用官方所提供的API來建立我們自己的機器人，更棒的是，網路上已經有可以直接使用的Python Library：https://github.com/python-telegram-bot/python-telegram-bot，這讓開發的過程更加容易。
使用 安裝Telegram後，可以利用以下網址使用我們的機器人 https://t.me/bikeanywherebot
Bot 首先會詢問使用者的出發地及目的地（支援模糊搜尋），並利用政府所提供的PTX API取的全台Ubike站點名稱、經緯度、已停車輛、空位，再利用經緯度及已停車輛或空位算出與出發地和目的地可用且最近的Ubike站點，在將這四個位置輸入Google Maps的導航，就完成了一次操作。
更詳細的說明也可以參考我們的簡報：https://docs.google.com/presentation/d/1lNG2SYwuUna-86FPnBUql_JN1xgufkv2j6Hai_BKe2E/edit
Library 我們在這個專案主要用了下面幾個library:
telegram (就是python-telegram-bot) requests 抓api的資料 json 將json檔變成Python原生的字典 configparser 讀取config.ini API 我們在這個project主要用到了兩個API，一個是Google的Firebase，用來生成Dynamic Link。還有一個是政府的PTX(Public Transport Data eXchange)平台，用來查詢Ubike的站點位置，即時的車輛數等等…
我們一開始並沒有找到PTX這個整合性的平台，而是先找到了各縣市的Ubike開放資料，而且並不是每個縣市的資料開放平台都有Ubike的資料。這讓我們很困擾，因為我們要花很多時間處理各個縣市不統一的資料形式，而且還要申請不同縣市資料平台的API Key。但幸好後來有一位小隊員找到政府的PTX平台，上面有所有擁有公共自行車站點的縣市的資料，而且只需要一個API Key，這讓資料的取得相當的方便。
我們的導航網址是利用網址分析的方式產出的，格式大概長這樣： https://www.google.com/maps/dir/?api=1&amp;amp;origin=海洋大學&amp;amp;destination=臺灣大學&amp;amp;waypoints=臺北動物園|臺北101&amp;amp;travelmode=driving
origin: 起點 (可以是座標、地點名稱、Google的placeID) destination: 終點 (可以是座標、地點名稱、Google的placeID) waypoints: 中途點 (格式與上面相同，中途點間用|分隔) travelmode: 導航模式 (driving, walking, motorcycling, etc&amp;hellip;) 所以上面那段網址點進去後，會出現Google Maps的導航畫面，路線是 海洋大學 → 臺北動物園 → 臺北101 → 臺灣大學 而導航模式是開車。 可以發現，這串網址如果直接發給用戶會相當的難看，而且並不會直接導向到Google Maps的APP，當我試著用各家的縮網址服務時，隊友找到了一個叫Dynamic Link的東西。Dynamic Link是一個由Google Firebase提供的服務，它不僅可以縮網址，而且網址的域名還是自訂的(https://bikeanywhere.</description></item></channel></rss>